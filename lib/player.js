// Generated by CoffeeScript 1.6.2
(function() {
  Crafty.c('Player', {
    init: function() {
      this.requires('Actor, Fourway, TheHero');
      this.startX = this.startY = 0;
    },
    startPosition: function(x, y) {
      this.startX = x;
      this.startY = y;
    },
    backToStart: function() {
      this.attr({
        x: this.startX,
        y: this.startY
      });
    },
    die: function() {}
  });

  Crafty.c('TheHero', {
    PlayerDirections: {
      right: 0,
      left: 1,
      up: 2,
      down: 3,
      upRight: 4,
      upLeft: 5,
      downRight: 6,
      downLeft: 7
    },
    init: function() {
      this.requires('HeroSprite, SpriteAnimation');
      this.playerState = this.PlayerDirections.right;
      this.moving = false;
      this.animate('moveRight', 0, 0, 1);
      this.animate('moveDown', 0, 1, 2);
      this.animate('moveLeft', 0, 7, 1);
      this.animate('moveUp', 0, 2, 2);
      this.animate('moveUpRight', 0, 3, 1);
      this.animate('moveUpLeft', 0, 4, 1);
      this.animate('moveDownLeft', 0, 5, 1);
      this.animate('moveDownRight', 0, 6, 1);
      this.bind("NewDirection", this._newDirection);
      this.bind("EnterFrame", this._enterFrameActive);
    },
    _newDirection: function(e) {
      if (e.x === 0 && e.y === 0) {
        this.playerState = this.playerState;
        return this.moving = false;
      } else {
        this.moving = true;
        if (e.x > 0 && e.y === 0) {
          return this.playerState = this.PlayerDirections.right;
        } else if (e.x === 0 && e.y > 0) {
          return this.playerState = this.PlayerDirections.down;
        } else if (e.x === 0 && e.y < 0) {
          return this.playerState = this.PlayerDirections.up;
        } else if (e.x < 0 && e.y === 0) {
          return this.playerState = this.PlayerDirections.left;
        } else if (e.x > 0 && e.y > 0) {
          return this.playerState = this.PlayerDirections.downRight;
        } else if (e.x < 0 && e.y > 0) {
          return this.playerState = this.PlayerDirections.downLeft;
        } else if (e.x < 0 && e.y < 0) {
          return this.playerState = this.PlayerDirections.upLeft;
        } else if (e.x > 0 && e.y < 0) {
          return this.playerState = this.PlayerDirections.upRight;
        }
      }
    },
    _enterFrameActive: function() {
      var CHANGE_SPEED;

      CHANGE_SPEED = 10;
      if (this.moving) {
        switch (this.playerState) {
          case this.PlayerDirections.right:
            return this.animate('moveRight', CHANGE_SPEED, -1);
          case this.PlayerDirections.down:
            return this.animate('moveDown', CHANGE_SPEED, -1);
          case this.PlayerDirections.left:
            return this.animate('moveLeft', CHANGE_SPEED, -1);
          case this.PlayerDirections.up:
            return this.animate('moveUp', CHANGE_SPEED, -1);
          case this.PlayerDirections.upRight:
            return this.animate('moveUpRight', CHANGE_SPEED, -1);
          case this.PlayerDirections.upLeft:
            return this.animate('moveUpLeft', CHANGE_SPEED, -1);
          case this.PlayerDirections.downLeft:
            return this.animate('moveDownLeft', CHANGE_SPEED, -1);
          case this.PlayerDirections.downRight:
            return this.animate('moveDownRight', CHANGE_SPEED, -1);
        }
      } else {
        return this.stop();
      }
    }
  });

}).call(this);
