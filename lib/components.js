// Generated by CoffeeScript 1.6.2
(function() {
  var killPlayer;

  Crafty.c('Actor', {
    init: function() {
      this.requires('2D, Canvas, Collision');
      return this;
    }
  });

  Crafty.c('Obstacle', {
    init: function() {
      this.requires('Actor');
      this.onHit('Player', this._onHit);
      this.onHit('Bullet', this._bulletHitsObstacle);
      return this;
    },
    _onHit: function(colliders) {
      var collider, _i, _len;

      for (_i = 0, _len = colliders.length; _i < _len; _i++) {
        collider = colliders[_i];
        collider.obj.x += -1 * collider.obj._movement.x;
        collider.obj.y += -1 * collider.obj._movement.y;
      }
    },
    _bulletHitsObstacle: function(bullets) {
      var bullet, _i, _len;

      for (_i = 0, _len = bullets.length; _i < _len; _i++) {
        bullet = bullets[_i];
        bullet.obj.destroy();
      }
    }
  });

  Crafty.c('Bullet', {
    init: function() {
      this.requires('2D, Canvas, Collision, Color');
      this.color("white");
      this.penetrating = false;
      return this;
    },
    kills: function(whatIKill) {
      return this.onHit(whatIKill, this._kill);
    },
    bulletHit: function(whatIHit, whatIDo) {
      var thisGuy;

      thisGuy = this;
      return this.onHit(whatIHit, function() {
        whatIDo();
        this.destroy();
      });
    },
    _kill: function(targets) {
      var target, _i, _len;

      for (_i = 0, _len = targets.length; _i < _len; _i++) {
        target = targets[_i];
        target.obj.destroy();
      }
      this.destroy();
    },
    fire: function(start_x, start_y, target_x, target_y, speed_x, speed_y) {
      this.start_x = start_x;
      this.start_y = start_y;
      this.target_x = target_x;
      this.target_y = target_y;
      this.speed_x = speed_x;
      this.speed_y = speed_y;
      this.x = start_x;
      this.y = start_y;
      this.w = this.h = 4;
      this.ang = Math.atan2(this.target_y - this.start_y, this.target_x - this.start_x);
      this.cosAng = Math.cos(this.ang);
      this.sinAng = Math.sin(this.ang);
      this.bind('EnterFrame', this._enterFrame);
    },
    _enterFrame: function() {
      this.x += this.speed_x * this.cosAng;
      this.y += this.speed_y * this.sinAng;
    }
  });

  Crafty.c('Goal', {
    init: function() {
      this.requires('Actor');
      return this.onHit("Player", this.levelWon);
    },
    levelWon: function() {
      Crafty.scene("NextLevel");
      return this;
    }
  });

  Crafty.c('Choppa', {
    init: function() {
      this.requires('ChoppaSprite, SpriteAnimation');
      this.animate('ChoppaSpin', 0, 0, 3);
      this.animate('ChoppaSpin', 10, -1);
    }
  });

  Crafty.c('LivesLeft', {
      init: function(val) {
          this.requires('2D, DOM, Color, Text');
          return this.bind("EnterFrame", function() {
              return this.text("Lives Left: "+val);
          });
      },
      updateLivesLeft: function(val) {
          this.unbind("EnterFrame");
          return this.bind("EnterFrame", function() {
              return this.text("Lives Left: "+val);
          });
      }
  });

  Crafty.c('Timer', {
    init: function() {
      this.requires('2D, DOM, Color, Text');
      this.endTime = this._getEndTime(10);
      this.textColor("Blue");
      return this.bind("EnterFrame", function() {
        var d, timeLeft;

        timeLeft = this._getTimeLeft();
        if (timeLeft <= 0) {
          this.text("0.0");
          return Crafty.scene("Death");
        } else {
          d = new Date(timeLeft);
          return this.text("" + d.getSeconds() + "." + d.getMilliseconds());
        }
      });
    },
    _getEndTime: function(val) {
      var currentTime, endTime;

      currentTime = new Date().getTime();
      endTime = currentTime + (1000 * val);
      return endTime;
    },
    _getTimeLeft: function() {
      var currentTime;

      currentTime = new Date().getTime();
      return this.endTime - currentTime;
    },
    levelOver: function() {
      this.unbind("EnterFrame");
      Crafty.scene("Death");
      return this;
    }
  });

  Crafty.c('ViewportMouseListener', {
    init: function() {
      this.requires('2D, DOM, Mouse');
      this.areaMap([0, 0], [Game.STAGE_WIDTH, 0], [Game.STAGE_WIDTH, Game.STAGE_HEIGHT], [0, Game.STAGE_HEIGHT]);
      this.bind('Click', this._mouseClick);
      return this;
    },
    _mouseClick: function(e) {
      var Player, bullet, playerCenterX, playerCenterY, targX, targY;

      Player = Crafty("Player");
      playerCenterX = Player.x + Player.w / 2;
      playerCenterY = Player.y + Player.h / 2;
      targX = e.x - Crafty.stage.x;
      targY = e.y - Crafty.stage.y;
      bullet = Crafty.e("Bullet");
      bullet.color("white");
      bullet.kills("Enemy");
      bullet.fire(playerCenterX, playerCenterY, targX, targY, 5, 5);
    }
  });

  Crafty.c('GameOver', {
    init: function() {
      this.requires('2D, DOM, GameOverScreen, Mouse');
      this.areaMap([0, 0], [Game.STAGE_WIDTH, 0], [Game.STAGE_WIDTH, Game.STAGE_HEIGHT], [0, Game.STAGE_HEIGHT]);
      this.bind('Click', this._restartGame);
      return this.attr({
        x: 0,
        y: 0,
        w: 800,
        h: 600
      });
    },
    _restartGame: function(e) {
        console.log("Restarting Game!");
        Crafty.scene("title");
        return this;
    }
  });

  Crafty.c('Winner', {
    init: function() {
      this.requires('2D, DOM, WinnerScreen');
      return this.attr({
        x: 0,
        y: 0,
        w: 800,
        h: 600
      });
    }
  });

  Crafty.c('Title', {
    init: function() {
      this.requires('2D, DOM, TitleScreen');
      this.attr({
        x: 0,
        y: 0,
        w: 800,
        h: 600
      });
      this.frameCount = 0;
      return this.bind('EnterFrame', function() {
        if (this.frameCount > 15) {
          this.toggleScreen();
          this.frameCount = 0;
        }
        return this.frameCount += 1;
      });
    },
    toggleScreen: function() {
      this.toggleComponent('TitleScreen, TitleScreen2');
      return this;
    }
  });

  Crafty.c('GameBG', {
    init: function() {
      this.requires('2D, Canvas, Image');
      this.attr({
        x: 0,
        y: 0,
        w: 800,
        h: 600
      });
      this.image('assets/images/grass.png');
      return this;
    }
  });

  Crafty.c('TimedShot', {
    init: function() {
      this.frameCount = 0;
      return this;
    },
    pewPewSetup: function(howOften, target, color, speed) {
      this.howOften = howOften;
      this.target = target;
      this.c = color;
      this.s = speed;
      this.bind('EnterFrame', this._enterFrame);
    },
    _enterFrame: function() {
      var b, centerX, centerY, targetX, targetY;

      if (this.frameCount >= this.howOften) {
        centerX = this._x + this._w / 2;
        centerY = this._y + this._h / 2;
        targetX = this.target._x + this.target._w / 2;
        targetY = this.target._y + this.target._h / 2;
        b = Crafty.e('Bullet');
        b.color = "white";
        b.bulletHit("Player", killPlayer);
        b.fire(centerX, centerY, targetX, targetY, this.s, this.s);
        this.frameCount = 0;
      } else {
        this.frameCount++;
      }
    }
  });

  killPlayer = function() {
    return Crafty("Player").backToStart();
  };

}).call(this);
