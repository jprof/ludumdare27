// Generated by CoffeeScript 1.6.2
(function() {
  Crafty.c('Enemy', {
    init: function() {
      this.requires('Actor');
      this.onHit("Player", this._resetPlayer);
    },
    _resetPlayer: function(targets) {
      var target, _i, _len;

      for (_i = 0, _len = targets.length; _i < _len; _i++) {
        target = targets[_i];
        target.obj.backToStart();
      }
    }
  });

  Crafty.c("HorizontalPatrol", {
    init: function() {
      this.countX = 0;
      this.framesToPatrol = 25;
      this.speed = 1;
      this.switchDirX = 0;
      this.countY = 0;
      this.switchDirY = 0;
      return this.bind("EnterFrame", this._horizontalPatrol);
    },
    patrolSpeed: function(speed) {
      return this.speed = speed;
    },
    patrolFrames: function(frames) {
      return this.framesToPatrol = frames;
    },
    _horizontalPatrol: function() {
      if (this.switchDirX === 0) {
        this.x += this.speed;
        this.countX++;
        if (this.countX >= this.framesToPatrol) {
          this.switchDirX = 1;
        }
      } else {
        this.x -= this.speed;
        this.countX--;
        if (this.countX <= 0) {
          this.switchDirX = 0;
        }
      }
    }
  });

  Crafty.c("VerticalPatrol", {
    init: function() {
      this.countY = 0;
      this.framesToPatrol = 25;
      this.speed = 1;
      this.switchDirY = 0;
      return this.bind("EnterFrame", this._verticalPatrol);
    },
    patrolSpeed: function(speed) {
      return this.speed = speed;
    },
    patrolFrames: function(frames) {
      return this.framesToPatrol = frames;
    },
    _verticalPatrol: function() {
      if (this.switchDirY === 0) {
        this.y += this.speed;
        this.countY++;
        if (this.countY >= this.framesToPatrol) {
          this.switchDirY = 1;
        }
      } else {
        this.y -= this.speed;
        this.countY--;
        if (this.countY <= 0) {
          this.switchDirY = 0;
        }
      }
    }
  });

  Crafty.c("DiagonalPatrol", {
    Directions: {
      DownRight: {
        x: 1,
        y: 1
      },
      DownLeft: {
        x: -1,
        y: 1
      },
      UpRight: {
        x: 1,
        y: -1
      },
      UpLeft: {
        x: -1,
        y: -1
      }
    },
    init: function() {
      this.framesToPatrol = 25;
      this.speed = 1;
      this.count = 0;
      this.switchDir = 0;
      this.patrolDir = this.Directions.DownRight;
      return this.bind("EnterFrame", this._patrolBoth);
    },
    patrolSpeed: function(speed) {
      return this.speed = speed;
    },
    patrolFrames: function(frames) {
      return this.framesToPatrol = frames;
    },
    _patrolBoth: function() {
      var newX, newY;

      newX = newY = 0;
      if (this.switchDir === 0) {
        this.count += 1;
        newX = this._x + this.patrolDir.x;
        newY = this._y + this.patrolDir.y;
        if (this.count >= this.framesToPatrol) {
          this.switchDir = 1;
        }
      } else {
        this.count -= 1;
        newX = this._x - this.patrolDir.x;
        newY = this._y - this.patrolDir.y;
        if (this.count <= 0) {
          this.switchDir = 0;
        }
      }
      this.attr({
        x: newX,
        y: newY
      });
    }
  });

  Crafty.c('Soldier', {
    PlayerDirections: {
      right: 0,
      left: 1,
      up: 2,
      down: 3,
      upRight: 4,
      upLeft: 5,
      downRight: 6,
      downLeft: 7
    },
    init: function() {
      this.requires('SoldierSprite, SpriteAnimation');
      this.playerState = this.PlayerDirections.right;
      this.moving = false;
      this.animate('moveRight', 0, 0, 1);
      this.animate('moveDown', 0, 1, 2);
      this.animate('moveLeft', 0, 7, 1);
      this.animate('moveUp', 0, 2, 2);
      this.animate('moveUpRight', 0, 3, 1);
      this.animate('moveUpLeft', 0, 4, 1);
      this.animate('moveDownLeft', 0, 5, 1);
      this.animate('moveDownRight', 0, 6, 1);
      this.bind("Move", this._getChangedDirection);
      this.bind("EnterFrame", this._enterFrameActive);
    },
    _getChangedDirection: function(e) {
      var dx, dy;

      dx = this._x - e._x;
      dy = this._y - e._y;
      return this._newDirection({
        x: dx,
        y: dy
      });
    },
    _newDirection: function(e) {
      if (e.x === 0 && e.y === 0) {
        this.playerState = this.playerState;
        return this.moving = false;
      } else {
        this.moving = true;
        if (e.x > 0 && e.y === 0) {
          return this.playerState = this.PlayerDirections.right;
        } else if (e.x === 0 && e.y > 0) {
          return this.playerState = this.PlayerDirections.down;
        } else if (e.x === 0 && e.y < 0) {
          return this.playerState = this.PlayerDirections.up;
        } else if (e.x < 0 && e.y === 0) {
          return this.playerState = this.PlayerDirections.left;
        } else if (e.x > 0 && e.y > 0) {
          return this.playerState = this.PlayerDirections.downRight;
        } else if (e.x < 0 && e.y > 0) {
          return this.playerState = this.PlayerDirections.downLeft;
        } else if (e.x < 0 && e.y < 0) {
          return this.playerState = this.PlayerDirections.upLeft;
        } else if (e.x > 0 && e.y < 0) {
          return this.playerState = this.PlayerDirections.upRight;
        }
      }
    },
    _enterFrameActive: function() {
      var CHANGE_SPEED;

      CHANGE_SPEED = 10;
      if (this.moving) {
        switch (this.playerState) {
          case this.PlayerDirections.right:
            return this.animate('moveRight', CHANGE_SPEED, -1);
          case this.PlayerDirections.down:
            return this.animate('moveDown', CHANGE_SPEED, -1);
          case this.PlayerDirections.left:
            return this.animate('moveLeft', CHANGE_SPEED, -1);
          case this.PlayerDirections.up:
            return this.animate('moveUp', CHANGE_SPEED, -1);
          case this.PlayerDirections.upRight:
            return this.animate('moveUpRight', CHANGE_SPEED, -1);
          case this.PlayerDirections.upLeft:
            return this.animate('moveUpLeft', CHANGE_SPEED, -1);
          case this.PlayerDirections.downLeft:
            return this.animate('moveDownLeft', CHANGE_SPEED, -1);
          case this.PlayerDirections.downRight:
            return this.animate('moveDownRight', CHANGE_SPEED, -1);
        }
      } else {
        return this.stop();
      }
    }
  });

}).call(this);
